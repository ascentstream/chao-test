name: kop test per hour
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */1 * * *'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: 17
  JAVA_DISTRIBUTION: temurin
  GITHUB_TOKEN: ${{ secrets.AS_GITHUB_TOKEN }}
  GIT_AUTHOR_NAME: github-actions[bot]
  GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  GIT_COMMITTER_NAME: github-actions[bot]
  GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

jobs:
  alo-chao:
    runs-on: ubuntu-latest
    env:
      REPO_PATH: ${{ github.workspace }}
      RELEASE_BRANCH: main
      AS_PLATFORM_IMAGE_TAG: chao-test-latest
      REGISTRY_USERNAME: ${{ secrets.ASCENTSTREAM_DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.ASCENTSTREAM_DOCKER_PASSWORD }}
      KAFKA_BOOTSTRAP_SERVERS: "pulsar-asp-broker-headless:9092"
      SEND_MSG_COUNT: 50000
      TOPIC_PARTITION: 10
      MAX_WAITING_TIME: 600

    strategy:
      # other jobs should run even if one test fails
      fail-fast: false
      matrix:
        test: [
          {
            name: "alo-normal",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-no-chaos.yaml"
          },
          {
            name: "alo-chaos-pod",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-pod-chaos.yaml"
          },
          {
            name: "alo-chaos-network-partition",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-partition.yaml"
          },
          {
            name: "alo-chaos-network-delay",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-delay.yaml"
          },
          {
            name: "alo-chaos-network-loss",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-loss.yaml"
          },
          {
            name: "alo-chaos-network-corrupt",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-corrupt.yaml"
          },
          {
            name: "alo-chaos-network-bandwidth",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-bandwidth.yaml"
          },
          {
            name: "alo-chaos-io-delay",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-io-delay.yaml"
          },
          {
            name: "alo-chaos-io-fault",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-io-fault.yaml"
          },
          {
            name: "alo-chaos-stress-cpu",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-stress-cpu.yaml"
          },
          {
            name: "alo-chaos-stress-memory",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-stress-memory.yaml"
          },
          {
            name: "alo-chaos-mix",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-mix-chaos.yaml"
          }
        ]

    steps:
      - name: Checkout chao-test codebase
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: Build
        run: mvn clean package
      - name: Build docker
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: chao-test:latest
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ASCENTSTREAM_DOCKER_USERNAME }}
          password: ${{ secrets.ASCENTSTREAM_DOCKER_PASSWORD }}

      - uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind
          kubectl_version: v1.25.5

      - name: deploy as-platform
        run: ${{ env.REPO_PATH }}/scripts/ci.sh deploy_as_platform
      - name: deploy chaos-mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v2.7.0/install.sh | bash -s -- --local kind --kind-version v0.17.0 --name kind  --k8s-version  1.25.3
          kubectl get pod  -n chaos-mesh
      - name: ${{ matrix.test.name }}
        run: |
          kind load docker-image chao-test:latest
          ${{ env.REPO_PATH }}/scripts/run-chao-test.sh
          kubectl -n pulsar-cluster get pods
      - name: injecting faults
        run: |
          sleep 30
          kubectl -n chaos-mesh apply -f ${{ matrix.test.chaos-mesh-config }}
          echo "get chaos-mesh workflow "
          kubectl -n chaos-mesh get workflow
          echo "get chaos-mesh workflownode "
          kubectl -n chaos-mesh get workflownode --selector="chaos-mesh.org/workflow=asp-platform"
      - name: Wait for workflow completion
        run:  ${{ env.REPO_PATH }}/scripts/wait-workflow-completion.sh

      - name: package reports
        if: failure()
        run: |
          rm -rf artifacts
          mkdir artifacts
          mkdir artifacts/chao-test
          mkdir artifacts/pulsar
          current_dir=$PWD
          kubectl -n pulsar-cluster logs chao-test > ${current_dir}/artifacts/chao-test/chao-test.log
          ${{ env.REPO_PATH }}/scripts/cp-logs-from-kind.sh  ${current_dir}/artifacts/chao-test
          kubectl -n pulsar-cluster logs pulsar-asp-broker-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-broker-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-broker-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-broker-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-2 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-2.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-2 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-2.log
          zip -r artifacts-${{ matrix.test.name }}.zip artifacts

      - uses: actions/upload-artifact@master
        name: upload reports
        if: failure()
        with:
          name: artifacts-${{ matrix.test.name }}
          path: artifacts-${{ matrix.test.name }}.zip

  idempotence-chao:
    runs-on: ubuntu-latest
    env:
      REPO_PATH: ${{ github.workspace }}
      RELEASE_BRANCH: main
      AS_PLATFORM_IMAGE_TAG: chao-test-latest
      REGISTRY_USERNAME: ${{ secrets.ASCENTSTREAM_DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.ASCENTSTREAM_DOCKER_PASSWORD }}
      KAFKA_BOOTSTRAP_SERVERS: "pulsar-asp-broker-headless:9092"
      SEND_MSG_COUNT: 50000
      TOPIC_PARTITION: 10
      MAX_WAITING_TIME: 600
      MAIN_CLASS: com.ascentsream.tests.kop.IdempotenceMessaging

    strategy:
      # other jobs should run even if one test fails
      fail-fast: false
      matrix:
        test: [
          {
            name: "idempotence-no-transaction",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-idem-network-delay.yaml"
          }
        ]

    steps:
      - name: Checkout chao-test codebase
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: Build
        run: mvn clean package
      - name: Build docker
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: chao-test:latest
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ASCENTSTREAM_DOCKER_USERNAME }}
          password: ${{ secrets.ASCENTSTREAM_DOCKER_PASSWORD }}

      - uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind
          kubectl_version: v1.25.5

      - name: deploy as-platform
        run: ${{ env.REPO_PATH }}/scripts/ci.sh deploy_as_platform
      - name: deploy chaos-mesh
        run: |
          curl -sSL https://mirrors.chaos-mesh.org/v2.7.0/install.sh | bash -s -- --local kind --kind-version v0.17.0 --name kind  --k8s-version  1.25.3
          kubectl get pod  -n chaos-mesh
      - name: ${{ matrix.test.name }}
        run: |
          kind load docker-image chao-test:latest
          ${{ env.REPO_PATH }}/scripts/run-chao-test.sh
          kubectl -n pulsar-cluster get pods
      - name: injecting faults
        run: |
          sleep 30
          kubectl -n chaos-mesh apply -f ${{ matrix.test.chaos-mesh-config }}
          echo "get chaos-mesh workflow "
          kubectl -n chaos-mesh get workflow
          echo "get chaos-mesh workflownode "
          kubectl -n chaos-mesh get workflownode --selector="chaos-mesh.org/workflow=asp-platform"
      - name: Wait for workflow completion
        run: ${{ env.REPO_PATH }}/scripts/wait-workflow-completion.sh

      - name: package reports
        if: failure()
        run: |
          rm -rf artifacts
          mkdir artifacts
          mkdir artifacts/chao-test
          mkdir artifacts/pulsar
          current_dir=$PWD
          kubectl -n pulsar-cluster logs chao-test > ${current_dir}/artifacts/chao-test/chao-test.log
          ${{ env.REPO_PATH }}/scripts/cp-logs-from-kind.sh  ${current_dir}/artifacts/chao-test
          kubectl -n pulsar-cluster logs pulsar-asp-broker-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-broker-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-broker-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-broker-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-2 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-2.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-2 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-2.log
          zip -r artifacts-${{ matrix.test.name }}.zip artifacts

      - uses: actions/upload-artifact@master
        name: upload reports
        if: failure()
        with:
          name: artifacts-${{ matrix.test.name }}
          path: artifacts-${{ matrix.test.name }}.zip