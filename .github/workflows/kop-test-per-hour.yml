name: kop test per hour
on:
  workflow_dispatch:
    inputs:
      as-platform-image-tag:
        description: 'Please input as-platform image tag'
        required: true
        default: 'chao-test-latest'
        type: string
      send-msg-count:
        description: 'Please enter the number of messages to send'
        required: true
        default: '50000'
        type: number
      max-waiting-time:
        description: 'Please enter the maximum waiting timeï¼Œs'
        required: true
        default: '600'
        type: number
  schedule:
    - cron: '*/5 * * * *'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: 17
  JAVA_DISTRIBUTION: temurin
  GITHUB_TOKEN: ${{ secrets.AS_GITHUB_TOKEN }}
  GIT_AUTHOR_NAME: github-actions[bot]
  GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  GIT_COMMITTER_NAME: github-actions[bot]
  GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

jobs:
  alt-chao:
    runs-on: ubuntu-latest
    env:
      REPO_PATH: ${{ github.workspace }}
      RELEASE_BRANCH: ${{ github.event.inputs.branch }}
      AS_PLATFORM_IMAGE_TAG: ${{ github.event.inputs.as-platform-image-tag }}
      REGISTRY_USERNAME: ${{ secrets.ASCENTSTREAM_DOCKER_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.ASCENTSTREAM_DOCKER_PASSWORD }}
      KAFKA_BOOTSTRAP_SERVERS: pulsar-asp-broker-headless:9092
      SEND_MSG_COUNT: ${{ github.event.inputs.send-msg-count }}
      TOPIC_PARTITION: 10
      MAX_WAITING_TIME: ${{ github.event.inputs.max-waiting-time }}

    strategy:
      # other jobs should run even if one test fails
      fail-fast: false
      matrix:
        test: [
          {
            name: "alo-normal",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-no-chaos.yaml"
          },
          {
            name: "alo-chaos-pod",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-pod-chaos.yaml"
          },
          {
            name: "alo-chaos-network-partition",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-partition.yaml"
          },
          {
            name: "alo-chaos-network-delay",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-delay.yaml"
          },
          {
            name: "alo-chaos-network-loss",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-loss.yaml"
          },
          {
            name: "alo-chaos-network-corrupt",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-corrupt.yaml"
          },
          {
            name: "alo-chaos-network-bandwidth",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-network-bandwidth.yaml"
          },
          {
            name: "alo-chaos-io-delay",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-io-delay.yaml"
          },
          {
            name: "alo-chaos-io-fault",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-io-fault.yaml"
          },
          {
            name: "alo-chaos-stress-cpu",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-stress-cpu.yaml"
          },
          {
            name: "alo-chaos-stress-memory",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-stress-memory.yaml"
          },
          {
            name: "alo-chaos-mix",
            chaos-mesh-config: "deploy/chaos-mesh/chaos-mesh-mix-chaos.yaml"
          }
        ]

    steps:
      - name: Checkout chao-test codebase
        uses: actions/checkout@v3
        with:
          repository: ascentstream/chao-test
          path: ../chao-test
          ref: ${{ github.event.inputs.branch }}
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      - name: Build
        run: mvn clean package
      - name: Build docker
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: chao-test:latest
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ASCENTSTREAM_DOCKER_USERNAME }}
          password: ${{ secrets.ASCENTSTREAM_DOCKER_PASSWORD }}

      - uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind
          kubectl_version: v1.25.5

      - name: deploy as-platform
        run: ${{ env.REPO_PATH }}/scripts/ci.sh deploy_as_platform

      - name: ${{ matrix.test.name }}
        run: |
          kind load docker-image chao-test:latest
          ${{ env.REPO_PATH }}/scripts/run-chao-test.sh
          kubectl -n pulsar-cluster get pods
      - name: encode chaos-mesh config
        run: echo "CFG_BASE64=$(base64 -w0 ${{ matrix.test.chaos-mesh-config }})" >> $GITHUB_ENV
      - name: run chaos-mesh
        uses: chaos-mesh/chaos-mesh-action@master # v0.5 is broken
        env:
          CHAOS_MESH_VERSION: v2.7.0
      - name: Wait for workflow completion
        run:  ${{ env.REPO_PATH }}/scripts/wait-workflow-completion.sh

      - name: package reports
        if: failure()
        run: |
          rm -rf artifacts
          mkdir artifacts
          mkdir artifacts/chao-test
          mkdir artifacts/pulsar
          current_dir=$PWD
          kubectl -n pulsar-cluster logs chao-test > ${current_dir}/artifacts/chao-test/chao-test.log
          ${{ env.REPO_PATH }}/scripts/cp-logs-from-kind.sh  ${current_dir}/artifacts/chao-test
          kubectl -n pulsar-cluster logs pulsar-asp-broker-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-broker-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-broker-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-broker-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-bookie-2 > ${current_dir}/artifacts/pulsar/pulsar-asp-bookie-2.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-0 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-0.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-1 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-1.log
          kubectl -n pulsar-cluster logs pulsar-asp-zookeeper-2 > ${current_dir}/artifacts/pulsar/pulsar-asp-zookeeper-2.log
          zip -r artifacts-${{ matrix.test.name }}.zip artifacts

      - uses: actions/upload-artifact@master
        name: upload reports
        if: failure()
        with:
          name: artifacts-${{ matrix.test.name }}
          path: artifacts-${{ matrix.test.name }}.zip
